{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","monster","name","src","id","CardList","monsters","map","SearchBox","placeholder","handleOnChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAGaA,G,YAAO,SAACC,GAAD,OAEhB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAKF,EAAMG,QAAQC,KAAMC,IAAG,+BAA0BL,EAAMG,QAAQG,GAAxC,eACjC,6BAAKN,EAAMG,QAAQC,YCFdG,EAAW,SAACP,GAIrB,OACI,qBAAKC,UAAU,YAAf,SAEKD,EAAMQ,SAASC,KAAI,SAAAN,GAAO,OAAI,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQG,UCTjDI,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,eAAhB,OAErB,uBAAOX,UAAU,SAASY,KAAK,OAAOF,YAAaA,EAAaG,SAAUF,MC6C/DG,G,wDA5Cb,aAAe,IAAD,8BACZ,gBAUFH,eAAiB,SAACI,GAChB,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAVtC,EAAKC,MAAQ,CAEXb,SAAU,GACVU,YAAa,IALH,E,gEAeO,IAAD,OAElBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAf,GAAQ,OAAI,EAAKS,SAAS,CAAET,SAAUA,S,+BAMtC,IAAD,EAE2BkB,KAAKL,MAA/Bb,EAFD,EAECA,SAAUU,EAFX,EAEWA,YACZS,EAAmBnB,EAASoB,QAAO,SAAAzB,GAAO,OAAIA,EAAQC,KAAKyB,cAAcC,SAASZ,EAAYW,kBAGpG,OACE,sBAAK5B,UAAU,MAAf,UACE,kDAEA,cAAC,EAAD,CAAWU,YAAY,gBAAgBC,eAAgBc,KAAKd,iBAC5D,cAAC,EAAD,CAAUJ,SAAUmB,W,GArCVI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.eafddef6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\n\r\nexport const Card = (props) => (\r\n\r\n    <div className=\"card-container\">\r\n        <img alt={props.monster.name} src={`https://robohash.org/${props.monster.id}?set=set2`} />\r\n        <h2>{props.monster.name}</h2>\r\n    </div>\r\n\r\n)","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport { Card } from '../card/card.component';\r\n\r\n\r\nexport const CardList = (props) => {\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"card-list\">\r\n\r\n            {props.monsters.map(monster => <Card key={monster.id} monster={monster} />)}\r\n\r\n        </div>)\r\n        ;\r\n}","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleOnChange }) => (\r\n\r\n    <input className=\"search\" type=\"text\" placeholder={placeholder} onChange={handleOnChange} />\r\n\r\n\r\n);","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component'\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n\n\n  handleOnChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  }\n\n  componentDidMount() {\n\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(monsters => this.setState({ monsters: monsters })\n      )\n\n\n  }\n\n  render() {\n\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n\n    return (\n      <div className=\"App\">\n        <h1>Monster Rolledox</h1>\n\n        <SearchBox placeholder='Enter Monster' handleOnChange={this.handleOnChange} />\n        <CardList monsters={filteredMonsters} />\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}